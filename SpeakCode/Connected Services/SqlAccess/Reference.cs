//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.26323.1
// 
namespace SpeakCode.SqlAccess {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/SQLAccess.Model")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int accField;
        
        private string passwordField;
        
        private string quesField;
        
        private int solField;
        
        private string userField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int acc {
            get {
                return this.accField;
            }
            set {
                if ((this.accField.Equals(value) != true)) {
                    this.accField = value;
                    this.RaisePropertyChanged("acc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ques {
            get {
                return this.quesField;
            }
            set {
                if ((object.ReferenceEquals(this.quesField, value) != true)) {
                    this.quesField = value;
                    this.RaisePropertyChanged("ques");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int sol {
            get {
                return this.solField;
            }
            set {
                if ((this.solField.Equals(value) != true)) {
                    this.solField = value;
                    this.RaisePropertyChanged("sol");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string user {
            get {
                return this.userField;
            }
            set {
                if ((object.ReferenceEquals(this.userField, value) != true)) {
                    this.userField = value;
                    this.RaisePropertyChanged("user");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserLang", Namespace="http://schemas.datacontract.org/2004/07/SQLAccess.Model")]
    public partial class UserLang : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string breakerField;
        
        private string continuexField;
        
        private string ifelseField;
        
        private string inputField;
        
        private string integerField;
        
        private string langField;
        
        private string looperField;
        
        private string printerField;
        
        private string stringsField;
        
        private string userField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string breaker {
            get {
                return this.breakerField;
            }
            set {
                if ((object.ReferenceEquals(this.breakerField, value) != true)) {
                    this.breakerField = value;
                    this.RaisePropertyChanged("breaker");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string continuex {
            get {
                return this.continuexField;
            }
            set {
                if ((object.ReferenceEquals(this.continuexField, value) != true)) {
                    this.continuexField = value;
                    this.RaisePropertyChanged("continuex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ifelse {
            get {
                return this.ifelseField;
            }
            set {
                if ((object.ReferenceEquals(this.ifelseField, value) != true)) {
                    this.ifelseField = value;
                    this.RaisePropertyChanged("ifelse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string input {
            get {
                return this.inputField;
            }
            set {
                if ((object.ReferenceEquals(this.inputField, value) != true)) {
                    this.inputField = value;
                    this.RaisePropertyChanged("input");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string integer {
            get {
                return this.integerField;
            }
            set {
                if ((object.ReferenceEquals(this.integerField, value) != true)) {
                    this.integerField = value;
                    this.RaisePropertyChanged("integer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lang {
            get {
                return this.langField;
            }
            set {
                if ((object.ReferenceEquals(this.langField, value) != true)) {
                    this.langField = value;
                    this.RaisePropertyChanged("lang");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string looper {
            get {
                return this.looperField;
            }
            set {
                if ((object.ReferenceEquals(this.looperField, value) != true)) {
                    this.looperField = value;
                    this.RaisePropertyChanged("looper");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string printer {
            get {
                return this.printerField;
            }
            set {
                if ((object.ReferenceEquals(this.printerField, value) != true)) {
                    this.printerField = value;
                    this.RaisePropertyChanged("printer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string strings {
            get {
                return this.stringsField;
            }
            set {
                if ((object.ReferenceEquals(this.stringsField, value) != true)) {
                    this.stringsField = value;
                    this.RaisePropertyChanged("strings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string user {
            get {
                return this.userField;
            }
            set {
                if ((object.ReferenceEquals(this.userField, value) != true)) {
                    this.userField = value;
                    this.RaisePropertyChanged("user");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SqlAccess.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/QueryUser", ReplyAction="http://tempuri.org/IService1/QueryUserResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SpeakCode.SqlAccess.User>> QueryUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(string user, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdProgress", ReplyAction="http://tempuri.org/IService1/UpdProgressResponse")]
        System.Threading.Tasks.Task<bool> UpdProgressAsync(SpeakCode.SqlAccess.User u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLang", ReplyAction="http://tempuri.org/IService1/AddLangResponse")]
        System.Threading.Tasks.Task<bool> AddLangAsync(SpeakCode.SqlAccess.UserLang l);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLangs", ReplyAction="http://tempuri.org/IService1/GetLangsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SpeakCode.SqlAccess.UserLang>> GetLangsAsync(string user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SpeakCode.SqlAccess.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SpeakCode.SqlAccess.IService1>, SpeakCode.SqlAccess.IService1 {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SpeakCode.SqlAccess.User>> QueryUserAsync() {
            return base.Channel.QueryUserAsync();
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(string user, string password) {
            return base.Channel.AddUserAsync(user, password);
        }
        
        public System.Threading.Tasks.Task<bool> UpdProgressAsync(SpeakCode.SqlAccess.User u) {
            return base.Channel.UpdProgressAsync(u);
        }
        
        public System.Threading.Tasks.Task<bool> AddLangAsync(SpeakCode.SqlAccess.UserLang l) {
            return base.Channel.AddLangAsync(l);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<SpeakCode.SqlAccess.UserLang>> GetLangsAsync(string user) {
            return base.Channel.GetLangsAsync(user);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:54122/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IService1,
        }
    }
}
